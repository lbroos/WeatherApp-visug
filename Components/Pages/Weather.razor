@page "/"
@using Microsoft.Extensions.Options
@using Microsoft.FeatureManagement

@attribute [StreamRendering]

@inject IOptionsSnapshot<WeatherSettings> WeatherSettings;
@inject IFeatureManagerSnapshot FeatureManager;

<PageTitle>Weather</PageTitle>

<h1>Weather for @WeatherSettings.Value.City</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            @if (WeatherSettings.Value.ShowFahrenheit)
            {
                <th>Temp. (F)</th>
            }
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                @if (WeatherSettings.Value.ShowFahrenheit)
                {
                    <td>@forecast.TemperatureF</td>
                }
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>

    <br/>
    if (isWeatherDescriptionEnabled)
    {
        <h1> Weather Description for the next @WeatherSettings.Value.NumberOfDays days will come here.</h1>
    }
}

@code {
    private WeatherForecast[]? forecasts;

    private bool isWeatherDescriptionEnabled;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, @WeatherSettings.Value.NumberOfDays).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        isWeatherDescriptionEnabled = await FeatureManager.IsEnabledAsync(FeatureFlags.WeatherDescription);
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
